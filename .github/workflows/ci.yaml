name: CI
on:
  pull_request:
  push:
    branches:
      - main
      - devel

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        goos: [ linux ]
        goarch: [ amd64, arm64, arm ]
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      # A cache entry is will be generated for `key`, and attempted to restore.
      # If `key` is not found, any partial match for `restore-keys` will be attempted.
      # Regardless of whether `key` was found or not, it will be created at the end of the run.
      # With this mechanism, we ensure caches are cycled regularly.
      - name: Go modules cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            gomod-
      - name: Build cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: gobuild-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.sha }}
          restore-keys: |
            gobuild-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Build binary
        run: make build

      - name: Build Docker image
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: make image

      - name: Run CI checks
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: make ci

  integration:
    name: Integration and e2e tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ "build", "chart-lint" ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - uses: helm/kind-action@v1.2.0

      - name: Go modules cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            gomod-

      - name: Build cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: gobuild-linux-amd64-${{ github.sha }}
          restore-keys: |
            gobuild-linux-amd64

      - name: Create k8s Kind Cluster
        run: make kind-up

      - name: Run integration tests
        env:
          NEWRELIC_API_KEY: "${{ secrets.NEWRELIC_API_KEY }}"
          NEWRELIC_ACCOUNT_ID: "${{ secrets.NEWRELIC_ACCOUNT_ID }}"
        run: make test-integration

      - name: Build Docker image
        run: make image-push IMAGE_REPO=localhost:5000/newrelic-k8s-metrics-adapter

      - name: Create Helm release
        env:
          KUBECONFIG: ./kubeconfig  # Generated by `make kind-up`
          NEWRELIC_API_KEY: "${{ secrets.NEWRELIC_API_KEY }}"
          NEWRELIC_ACCOUNT_ID: "${{ secrets.NEWRELIC_ACCOUNT_ID }}"
        run: |
          make generate-local-values
          helm install newrelic-k8s-metrics-adapter ./charts/newrelic-k8s-metrics-adapter \
          --set image.repository=localhost:5000/newrelic-k8s-metrics-adapter \
          --set image.pullPolicy=IfNotPresent \
          --values values-dev.yaml --values values-local.yaml \
          --wait --timeout 240s

      - name: Run e2e tests
        run: make test-e2e

  gloang-lint:
    name: Golang CI Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Check linters are up to date
        run: make check-update-linters
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: true
          version: v1.42

  chart-lint:
    name: Helm chart Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: helm/chart-testing-action@v2.1.0
      - name: Set up helm-unittest
        run: |
          helm plugin install https://github.com/quintush/helm-unittest
      - name: Lint charts
        run: ct --config .github/ct.yaml lint --debug --all

      - name: Run unit tests
        run: |
          for chart in $(ct --config .github/ct.yaml list-changed); do
            if [ -d "$chart/tests/" ]; then
              helm unittest -3 $chart
            fi
          done
      - name: Check for changed installable charts
        id: list-changed
        run: |
          changed=$(ct --config .github/ct.yaml list-changed)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        if: steps.list-changed.outputs.changed == 'true'
      - name: Create test ns
        if: steps.list-changed.outputs.changed == 'true'
        run: kubectl create ns test

      - name: Test install charts
        run: ct --config .github/ct.yaml install --namespace test
      - name: Test upgrade charts
        run: ct --config .github/ct.yaml install --namespace test --upgrade

  codespell:
    name: Codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:

      - uses: actions/checkout@v2
      - name: Codespell test
        uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          check_hidden: true
          ignore_words_list: te
          skip: ./.git,./internal/generated
